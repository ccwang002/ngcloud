Quick Start
===========

.. _ngreport:

Using ``ngreport``
------------------

High level NGCloud report generator can be accessed by both ways,

.. code-block:: bash

    $ ngreport
    # Usage:
    #     ngreport [-p <pipeline>] <job_dir> [<out_dir>] [-v ...]
    #     ngreport [-p <pipeline>] <job_dir> [-o <out_dir>] [-v ...]
    #     ngreport -h | --help
    #     ngreport --version

    $ python -m ngcloud.report
    # Usage:
    # ... (they access the same function)


.. seealso::

    To use the parser inside a Python program, call :py:func:`ngcloud.report.gen_report` directly,
    or call :py:func:`ngcloud.report.main` and pass the console arugments.

It takes three main arguments to run:

- **Valid pipeline name** (default: ``tuxedo``)
- **Path to job folder** (required)
- **Path to output folder** (default: ``./output``)

Currently, only Tuxedo pipeline is valid, so it is the default option. You can still pass ``-p tuxedo`` or ``-p ngcloud.pipe.tuxedo.TuxedoReport`` to tell :command:`ngreport` to generate the report of Tuxedo pipeline.

If you want to use your own NGS results running through the same pipeline, you need to organize the result folder and write some extra information so NGCloud can recognize. See :ref:`prepare-own-result` for more information.

By now, just follow our steps and use our bundled minimal example. We shipped a minimal example with NGCloud source code, hence you can use it to give a first try. Finally, you need to decide the output location. We choose :file:`/tmp` for demo. By default it is :file:`./output`.


.. TODO:: add guide how to make a new pipeline and input pipline by its class name

Full help message can be obtained by ``ngreport -h``.


.. _minmal-example:

Run the minimal example
-----------------------

To get familiar with how NGCloud works, we first demo the usage through a minimal Tuxedo NGS pipeline example. Note that the example is for demo usage, don't use the generated report for research.

The minimal result is under :file:`{ngcloud_src}/examples/job_tuxedo_minimal`.

To generate the report, run

.. code-block:: bash

    ngreport -p tuxedo {ngcloud_src}/examples/job_tuxedo_minimal -o /tmp

You need to replace `{ngcloud_src}` with the path where you download the NGCloud source code. If no warning message is shown, the output will be under :file:`/tmp/report_9527`. It is a HTML-based report so you need a web browser to view it. Open :file:`/tmp/report_9527/index.html` and you can get the beautiful report generated by NGCloud.

.. figure:: /pics/minimal_example_screenshot.png
    :width: 75 %
    :align: center

    Screenshot of the report frontpage

Click on other pages such as *Quality Control* to quick peek the report. Now you have finish the first run using NGCloud. Congrats!

If you want to see what's going on during the report generation, pass an extra ``-v`` argument to :command:`ngreport` to increase the verbosity. A colorful log output will be produced by extra ``--color`` argument, which requires colorlog_ or install NGCloud with ``pip install ngcloud[color]``.

.. _colorlog: https://github.com/borntyping/python-colorlog

Further Reading
---------------

On the following sections, we will show you how to organize your own NGS result to feed in NGCloud. Also, a detailed explanation will be given to show what's under the hood.

If your NGS analysis pipeline is not supported by NGCloud, you can add it your own, combining the existed NGCloud report templates. :ref:`custom_pipe_groundup` and :ref:`extend_builtin_pipe` will show you how to write your own pipeline. You will need :ref:`NGCloud API documentation <package-api>` for more information.

Finally, If you enjoy using NGCloud and hope it gets better, the best support will be contributing back to NGCloud. See :ref:`developing` and :ref:`contributing` to get involved.
